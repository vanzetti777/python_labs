testcase1="–ü—Ä–ò–≤–ï—Ç\n–ú–ò—Ä\t"
testcase2="—ë–∂–∏–∫, –Å–ª–∫–∞" 
testcase3="Hello\r\nWorld" 
testcase4="  –¥–≤–æ–π–Ω—ã–µ   –ø—Ä–æ–±–µ–ª—ã  "
import re
def normalize(text: str, *, casefold: bool = True, yo2e: bool = True) -> str:
    # r'\s+' –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Å–µ –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ –ø—Ä–æ–±–µ–ª
    text= re.sub(r'\s+', ' ', text).strip()
    text=text.casefold()
    text=text.replace('—ë','e')
    return text
    
print(normalize(testcase1))
print(normalize(testcase2))
print(normalize(testcase3))
print(normalize(testcase4))

testcase1="–ø—Ä–∏–≤–µ—Ç –º–∏—Ä" 
testcase2="hello,world!!!"
testcase3="–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫—Ä—É—Ç–æ" 
testcase4="2025 –≥–æ–¥"
testcase5="emoji üòÄ –Ω–µ —Å–ª–æ–≤–æ"
import re
def tokenize(text: str) -> list[str]:
    shablon=r'\w+(?:-\w+)*'
    # –∏—â–µ—Ç –≤—Å–µ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ –Ω–æ—Ä–º —Ç–µ–∫—Å—Ç–∞ 
    tockens = (re.findall(shablon,normalize(text)))
    return tockens



print(tokenize(testcase1))
print(tokenize(testcase2))
print(tokenize(testcase3))
print(tokenize(testcase4))
print(tokenize(testcase5))


testcase1=["a","b","a","c","b","a"]
testcase2=["bb","aa","bb","aa","cc"]

# from collections import*
def count_freq(tokens: list[str]) -> dict[str, int]:
    fdict={}
    #—Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    for token in tokens:
        # –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä '–∞' —Ç–æ —Å—á–µ—Ç—á–∏–∫ "a" —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è 
        if token in fdict:
            fdict[token]+=1
        else:
            fdict[token]=1
    return fdict

#–£–ñ–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –°–õ–û–í–ê–†–Ø –ò–ó –≠–õ–ï–ú–ï–ù–¢–û–í
def top_n(freq: dict[str, int], n: int = 5) -> list[tuple[str, int]]:
    #–ø—Ä–µ–≤—Ä–∞—â–µ–º –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–∫–µ
    items = list(freq.items())
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã, –ø–æ—Ç–æ–º –ø–æ –∞–ª—Ñ
    sorted_items = sorted(items, key=lambda x: (-x[1], x[0]))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return sorted_items[:n]


print(count_freq(testcase1))
print(top_n(count_freq(testcase1)))
print(count_freq(testcase2))
print(top_n(count_freq(testcase2)))